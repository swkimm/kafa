// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  Verifying
  Enable
  Disable
}

enum OAuthProvider {
  Naver
  Kakao
}

enum RosterStatus {
  Enable
  Graduate
  Disable
  Verifying
}

enum RosterType {
  Athlete
  Staff
  Coach
  HeadCoach
}

enum GameResult {
  HomeWin
  AwayWin
  Draw
  NotFinished
}

enum Role {
  Admin
  Manager
  User
}

enum TeamStatus {
  Enabled
  Disabled
}

enum TeamEnrollStatus {
  Received
  Approved
  Rejected
}

enum LeagueApplyStatus {
  Received
  Approved
  Hold
  Rejected
}

enum GenderType {
  Male
  Female
  Others
}

enum RecordType {
  Passer
  Rusher
  Receiver
  Kicker
  Safety
}

enum PostType {
  Notice
  Normal
  Secret
}

// Account Module
model Account {
  id                   Int                   @id @default(autoincrement())
  name                 String                @db.VarChar(128)
  email                String                @db.VarChar(128)
  username             String                @unique @db.VarChar(128)
  teamId               Int?                  @map("team_id")
  password             String                @db.VarChar(128)
  status               AccountStatus         @default(Verifying)
  createdAt            DateTime              @default(now()) @map("created_at")
  deletedAt            DateTime?
  role                 Role
  profileImgUrl        String?               @map("profile_img_url") @db.Text
  lastPasswordChanged  DateTime              @default(now()) @map("last_password_changed")
  lastLogin            DateTime              @default(now()) @map("last_login")
  OAuths               OAuth[]
  Posts                Post[]
  Comments             Comment[]
  Rosters              Roster[]
  RegisterTeamRequest  RegisterTeamRequest[]
  Team                 Team?                 @relation(fields: [teamId], references: [id])
  AccountCreadential   AccountCredential?
  AccountCertification AccountCertification?

  @@unique([email, role])
}

model AccountCertification {
  accountId Int      @id @map("account_id")
  fileUrl   String   @db.Text
  updatedAt DateTime @updatedAt @map("updated_at")
  Account   Account  @relation(fields: [accountId], references: [id])
}

model AccountCredential {
  accountId Int        @id @map("account_id")
  name      String     @db.VarChar(128)
  gender    GenderType
  birthday  DateTime
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  Account   Account    @relation(fields: [accountId], references: [id])
}

model OAuth {
  accountId    Int           @id @map("account_id")
  providerId   String        @map("provider_id") @db.VarChar(256)
  providerType OAuthProvider @map("provider_type")
  Account      Account       @relation(fields: [accountId], references: [id])

  @@unique([providerId, providerType])
}

// Post Module
model Post {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(256)
  content     String       @db.Text
  accountId   Int          @map("account_id")
  type        PostType
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  Account     Account      @relation(fields: [accountId], references: [id])
  Attachments Attachment[]
  Comments    Comment[]
}

model Attachment {
  id      Int    @id @default(autoincrement())
  postId  Int    @map("post_id")
  fileUrl String @map("file_url") @db.Text
  name    String @db.Text
  Post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  accountId Int      @map("account_id")
  content   String   @db.Text
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  Account   Account  @relation(fields: [accountId], references: [id])
}

// Association Module
model Association {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(128)
  globalName    String        @map("global_name") @db.VarChar(128)
  initial       String        @db.VarChar(32)
  profileImgUrl String?       @map("profile_img_url") @db.Text
  parentId      Int?          @map("parent_id")
  Parent        Association?  @relation("AssociationToAssociation", fields: [parentId], references: [id])
  Children      Association[] @relation("AssociationToAssociation")
  Team          Team[]
  Leagues       League[]

  @@index([parentId], name: "parent_id_idx")
}

model League {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(256)
  startedAt      DateTime        @map("started_at")
  startedYear    Int             @map("started_year")
  endedAt        DateTime        @map("ended_at")
  associationId  Int?            @map("association_id")
  LeagueSponsers LeagueSponser[]
  TeamLeagues    TeamLeague[]
  Games          Game[]
  Association    Association?    @relation(fields: [associationId], references: [id])
  LeagueRoster   LeagueRoster[]
}

model LeagueSponser {
  League    League  @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId  Int     @map("league_id")
  Sponser   Sponser @relation(fields: [sponserId], references: [id], onDelete: Cascade)
  sponserId Int     @map("sponser_id")

  @@unique([leagueId, sponserId])
}

model Sponser {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(128)
  websiteUrl     String          @map("website_url") @db.Text
  profileImgUrl  String?         @map("profile_img_url") @db.Text
  LeagueSponsers LeagueSponser[]
}

// Team module
model Team {
  id               Int          @id @default(autoincrement())
  associationId    Int          @map("association_id")
  name             String       @db.VarChar(128)
  globalName       String       @map("global_name") @db.VarChar(128)
  hometown         String       @db.VarChar(128)
  initial          String       @db.VarChar(16)
  establishedAt    DateTime     @map("established_at")
  color            String       @db.VarChar(16)
  subColor         String?      @db.VarChar(16)
  profileImgUrl    String?      @map("profile_img_url") @db.Text
  backgroundImgUrl String?      @map("background_img_url") @db.Text
  deletedAt        DateTime?    @map("deleted_at")
  status           TeamStatus   @default(Enabled)
  createdAt        DateTime     @default(now()) @map("created_at")
  Association      Association  @relation(fields: [associationId], references: [id])
  Rosters          Roster[]
  TeamLeagues      TeamLeague[]
  HomeGames        Game[]       @relation("homeTeam")
  AwayGames        Game[]       @relation("awayTeam")
  Account          Account[]
}

model RegisterTeamRequest {
  id           Int              @id @default(autoincrement())
  accountId    Int              @map("account_id")
  username     String
  data         Json
  createdAt    DateTime         @default(now()) @map("created_at")
  rejectReason String?          @map("reject_reason") @db.Text
  status       TeamEnrollStatus @default(Received)
  Account      Account          @relation(fields: [accountId], references: [id])
}

model TeamLeague {
  teamId       Int               @map("team_id")
  leagueId     Int               @map("league_id")
  rank         Int?              @db.SmallInt
  applyStatus  LeagueApplyStatus @default(Received)
  rejectReason String?           @map("reject_reason") @db.Text
  Team         Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  League       League            @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([teamId, leagueId])
}

model LeagueRoster {
  leagueId Int    @map("league_id")
  rosterId Int    @map("roster_id")
  awards   Json?
  League   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  Roster   Roster @relation(fields: [rosterId], references: [id], onDelete: Cascade)

  @@unique([leagueId, rosterId])
}

model Roster {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(64)
  globalName        String             @map("global_name") @db.VarChar(64)
  rosterType        RosterType         @map("roster_type")
  teamId            Int                @map("team_id")
  accountId         Int?               @map("account_id")
  registerYear      DateTime           @map("register_year")
  profileImgUrl     String?            @map("profile_img_url") @db.Text
  status            RosterStatus       @default(Verifying)
  Account           Account?           @relation(fields: [accountId], references: [id])
  Team              Team               @relation(fields: [teamId], references: [id])
  Athlete           Athlete?
  RosterCredentials RosterCredentials?
  LeagueRoster      LeagueRoster[]
}

model RosterCredentials {
  rosterId Int        @id @map("roster_id")
  name     String     @db.VarChar(128)
  gender   GenderType
  birthday DateTime
  Roster   Roster     @relation(fields: [rosterId], references: [id], onDelete: Cascade)
}

model Athlete {
  rosterId   Int      @id @map("roster_id")
  position   Json
  height     Int
  weight     Int
  backNumber Int
  Records    Record[]
  Roster     Roster   @relation(fields: [rosterId], references: [id], onDelete: Cascade)
}

// Game Module
model Game {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(256)
  leagueId   Int        @map("league_id")
  startedAt  DateTime   @map("started_at")
  homeTeamId Int        @map("home_team_id")
  awayTeamId Int        @map("away_team_id")
  stadium    String     @db.VarChar(256)
  result     GameResult
  homeTeam   Team       @relation("homeTeam", fields: [homeTeamId], references: [id])
  awayTeam   Team       @relation("awayTeam", fields: [awayTeamId], references: [id])
  League     League     @relation(fields: [leagueId], references: [id])
  score      Score?
  Records    Record[]
}

model Score {
  gameId                Int      @id @map("game_id")
  homeTeamScore         Int?     @map("home_team_score")
  homeTeamQuarterScores Int[]    @map("home_team_quarter_scores")
  awayTeamScore         Int?     @map("away_team_score")
  awayTeamQuarterScores Int[]    @map("away_team_quarter_scores")
  overtime              Boolean?
  Game                  Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

// Record module
model Record {
  id       Int        @id @default(autoincrement())
  rosterId Int        @map("roster_id")
  gameId   Int        @map("game_id")
  score    Int
  type     RecordType
  unit     String     @db.VarChar(32)
  Game     Game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  Athlete  Athlete    @relation(fields: [rosterId], references: [rosterId], onDelete: Cascade)
}
